
________________________________________________________________________________
        
                          Biocompute Object
        
________________________________________________________________________________

File Type: Biocompute line type descriptions
Name     : biocompute_line_type.txt
Release  : TBD

________________________________________________________________________________
Descriptions:
'line': refers to line types in the biocompute object. Line types preceeded by '_' means that the field is not mutable by a user who is running the biocompute object.
'name': refers to human readable name of the line type. This field can be empty.
'note': refers to description of the line type.
________________________________________________________________________________
#BIOCOMPUTE OBJECT INSTANCE
- A biocompute object is a metadata record of an experimental instance; it has everything needed to reproduce a single in silico experiment. It contains references to all input data, all arguments of the underlying software application, and all version information of the executable program/programs used to run the bioinformatics computations. Extending this idea, a complex web of separate objects is still a single instance where ALL the input, output, and parameters serve the same function as in a singular instance, and can therefore be joined with other similar objects. The biocompute object example used here is a combination of two separate computations that have been joined into one pipeline. This example can serve as inspiration for complex pipelines created by joining the appropriate nodes (inputs and outputs) of other biocompute objects. On this page we demonstrate how all information from one experimental instance can be easily captured in an extensible and human readable format. The first example biocompute object BH_1 was created using protocol and results developed by Donaldson, et al. 2015. For more details you can read: Eric F Donaldson, Damon J Deming, Julian J O'Rear,Lisa K Naeger: Regulatory evaluation of antiviral drug resistance in the era of next-generation sequencing. Biomarkers in Medicine, November 2015 ,Vol. 9, No. 11, Pages 1047-1051 , DOI 10.2217/bmm.15.63 (doi:10.2217/bmm.15.63)

line: _id
name: id
note: This is the biocompute object id. The id is a unique identifying value assigned to each object. This value is used for all references to this object.


line: _type
name:
note: This field defines the type of the object.


line: name
name:
note: The user-defined name of the object. It can be any type of text.


line: description
name:
note: The creator-specified description of the object or field in a type. Information in this field lets other users know the function and purpose of the object.

line: _verification
name: Describes the position of an object in the verification process. The 'unreviewed' flag indicates that the object has been submitted, but no further evalutation or verification has occurred. The 'in_progress' flag indicates that verification is underway. the 'reviewed' flag indicates that the biocompute object has been verified and reviewed. The 'manual' flag indicates that the object has been manually verified. The 'suspended' flag indicates an object that was once valid is no longer considered valid. The 'error' flag indicates that an error was detected with the biocompute object.
note: 

line: _creation_date
name:
note: The time and date that the biocompute object is created.

line: _modification_date
name:
note: This field will list all the dates and time an object is modified.

line: _publication_status
name:
note: This is a choice field with four options. The 'draft' flag indicates that an object is in draft form and is still being edited. The 'open access' flag indicates that an object has been published and is freely available to anyone. The objects with the 'private' flag have restrictions on who can view and access them. This is a way for researchers using restricted data or metadata to insure the confidentially is maintained.

line: keywords
name:
note: Keywords to aid in search-ability and description of the object. These is a set of controlled vocabulary.

line: x-refs
name: Disease Ontology, Gene Ontology, Sequence Ontology, etc.
note: The x-refs allows for the ability to cross reference curated scientific resources associated with a specific workflow

line: usability_domain
name:
note: usability domain along with keywords can help determine when and how the biocompute object can be used. Novel use of the biocompute object should result in the creation of a new entry.  

line: _authors
name:
note: Authors who created the initial biocompute object.

line: _pipeline
name:
note: Pipeline that is used to run the biocompute object.

line: _pipeline, name
name:
note: The name of the pipeline that is used to run the biocompute object.

line: _pipeline, version
name:
note: Version of the pipeline

line: _pipeline, id 
name:
note: Pipeline ID.

line: alignment tools
name:
note: Arguments for alignment and parameter settings

line: alignment, seed
name: 
note: Part of read which is made of a few base pairs. The size of the seed determines accuracy of the results.

line: alignment, minimum_match_len
name:
note: Minumum match length needed to be considered an alignment.

line: alignment, mismatch_allowed
name:
note: Mismatches allowed to be considered an alignment.

line: alignment, divergence_threshold_percent
name:
note: A filter for the sequences which are clustered in predefined sequence divergent thresholds

line: alignment, mismatch_allowed
name:
note: Mismatches allowed to be considered an alignment

line: variant_calling
name:
note: Arguments for variant calling which identifies single nucleotide variants (SNVs)

line: variant_calling, min_coverage
name:
note: Minimum depth of read coverage required for variant calling

line: variant_calling, freq_cutoff
name:
note: Percent of reads that should have the single nucleotide variation for variant calling

line: reference_sequences
name:
note: Nucleotide sequences to which the NGS reads are to be mapped

line: ngs_reads
name:
note: Nucleotide reads

line: snv_profile
name:
note: Output of variant calling

line: snp_profiling
name:
note: output of SNPs quantification

line: alignment_file
name:
note: Output of alignment

line: aminoacid_calls
name:
note: Output of amino acid calls

line: accession_based_results
name:
note: output files based on the accession numbers submitted for the workflow

line: format
name:
note: the format of the output files based on the accession numbers submitted for for the workflow

line: filename
name:
note: name the file according to the workflow or experiment

line: unalignedReads
name:
note: an output file containing unaligned reads of the specific workflow

line: hit_list
name: 
note: a list with the number of hits done in the specific experiment

line: aminoacid_calls
name:
note: output of amino acid calls

line: verification_kit
name:
note: mechanism that allows the user to verify the workflow

line: source
name:
note: a scientific resource that experimental data such as sequences can be obtained

line: db, database
name:
note: repository which stores the sequences and other scientific data

line: sequence_reads
name:
note: analyzing and quantifying the sequence data

line: accession_based_results
name: 
note: output file with the results obtained


#PIPELINE INSTANCE
- 
line: _id
name:
note: Pipeline ID.

line: _type
name:
note: Pipeline definition.

line: name
name:
note: Pipeline name.

line: description
name:
note: Pipeline description

line: tool_used
name:
note: All the software tools and their non-default parameters used in the pipeline.

line: tool_used, name
name:
note: Name of tool.

line: tool_used, version
name:
note: Version number of tool.

line: tool_used, arguments
name:
note: Non-default arguments for the tool.

#PIPELINE DATA TYPE
- To create an instance of a workflow (biocompute object), the data type for that instance first needs to be defined. A data type is a set of field and attributes related to specific object type, or a list of the input, output, and variables. In a data type, the fiel- -attribute collection is specified and a label is assigned for the collection. In other words, a list of the different values are defined and then what can be put in those values is specified.

Line types in this section refer to the specific instance of the pipeline used in a biocompute object.

Line type descriptions are not included in this document.

line:
name:
note:

line:
name:
note:

#BASE PIPELINE DATA TYPE
- A pipeline is a set of computations connected in series, where the output of one element can be part or all of the input for the next element. To have the pipline instance data type we used earlier we need to define the elements that make up that type. Then we can use this type to create an object to describe any pipeline. Line types in this section refer to is more general than the pipeline data type which inherits from the base pipeline data type. Pipeline instance data type line type descriptions are not included in this document.

line: _type
name:
note: Indicates this is a data type.

line:
name:
note:

#BIOCOMPUTE DATA TYPE
- Descriptions of biocompute data types.

line:
name:
note:

line:
name:
note:


#BASE METADATA TYPE
- A data type hierarchy contains multiple data objects linked to one another. The field attributes from one data object (the parent type) are inherited by one or many of the other data objects (the child types). In addition to the inherited field attributes, a given child type may have additional field attributes specific to that child type, as we saw above. In this example the base biocompute metadata type is not only applicable for biocompute objects, but for any almost any other object type.

line: _type
name:
note: Indicates this is a data type definition.

line: name
name:
note: Name of base metadata type.

line: description
name:
note: Description of base metadata type.

line: _fields
name:
note: The fields present in base metadata type.
